<?php
/**
 * Created by PhpStorm.
 * User: roman
 * Date: 17.10.16
 * Time: 17:41
 */

namespace App\Tests;


use App\Models\User;
use Symfony\Component\HttpFoundation\Response;

class EntityTest extends TestCase
{
    public function testCreateEntity() {
        $this->post('/entities', [
            /*create_fields*/
        ]);

        $this->assertResponseOk();

        $this->seeInDatabase('entities', [
            /*create_fields*/
        ]);
    }

    /*create_tests_with_not_existed_required_fields*/
    /*create_tests_with_wrong_parameters*/

    public function testUpdateEntity() {
        $this->put('/entities/{existedEntityId}', [
            /*update_fields*/
        ]);

        $this->assertResponseStatus(Response::HTTP_NO_CONTENT);

        $this->seeInDatabase('entities', [
            /*update_fields*/
        ]);

        $this->notSeeInDatabase('entities', [
            'id' => existedEntityId,
            /*get_fields*/
        ]);
    }

    public function testUpdateEntityNotExists() {
        $this->put('/entities/{notExistedEntityId}', [
            /*update_fields*/
        ]);

        $this->assertResponseStatus(Response::HTTP_NOT_FOUND);

        $this->seeInDatabase('entities', [
            /*get_fields*/
        ]);
    }

    /*update_tests_with_wrong_parameters*/

    public function testDeleteEntity() {
        $this->delete('/entities/{existedEntityId}');

        $this->assertResponseStatus(Response::HTTP_NO_CONTENT);

        $this->notSeeInDatabase('favorites', [
            'id' => existedEntityId
        ]);
    }

    public function testDeleteEntityNotExists() {
        $this->delete('/entities/{notExistedEntityId}');

        $this->assertResponseStatus(Response::HTTP_NOT_FOUND);

        $this->notSeeInDatabase('favorites', [
            'id' => existedEntityId,
            /*get_fields*/
        ]);
    }

    public function testGetEntity() {
        $this->get('/entities/{existedEntityId}');

        $this->assertResponseOk();

        $expected = [
            /*get_fields*/
        ];

        $this->assertEquals($expected, $this->getJsonResponse());
    }

    public function testGetEntityNotExists() {
        $this->delete('/entities/{notExistedEntityId}');

        $this->assertResponseStatus(Response::HTTP_NOT_FOUND);
    }
}